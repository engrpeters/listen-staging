{"version":3,"sources":["/tools/static-assets/server/mini-files.js"],"names":["module","export","isWindowsLikeFilesystem","toPosixPath","convertToPosixPath","toDosPath","convertToWindowsPath","convertToOSPath","convertToStandardPath","convertToOSLineEndings","convertToStandardLineEndings","unicodeNormalizePath","wrapPathFunction","pathJoin","pathNormalize","pathRelative","pathResolve","pathDirname","pathBasename","pathExtname","pathIsAbsolute","pathSep","pathDelimiter","pathOsDelimiter","assert","link","v","path","release","EOL","process","platform","indexOf","p","partialPath","env","SystemDrive","replace","slice","test","Error","standardPath","osPath","fileContents","RegExp","normalize","name","partialPaths","f","strictEqual","args","Array","prototype","map","call","arguments","result","apply","delimiter"],"mappings":"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","sourcesContent":["import * as assert from \"assert\";\nimport * as path from \"path\";\nimport { release, EOL } from \"os\";\n\n// All of these functions are attached to files.js for the tool;\n// they live here because we need them in boot.js as well to avoid duplicating\n// a lot of the code.\n//\n// Note that this file does NOT contain any of the \"perform I/O maybe\n// synchronously\" functions from files.js; this is intentional, because we want\n// to make it very hard to accidentally use fs.*Sync functions in the app server\n// after bootup (since they block all concurrency!)\n\n// Detect that we are on a Windows-like Filesystem, such as that in a WSL\n// (Windows Subsystem for Linux) even if it otherwise looks like we're on Unix.\n// https://github.com/Microsoft/BashOnWindows/issues/423#issuecomment-221627364\nexport function isWindowsLikeFilesystem() {\n  return process.platform === \"win32\" || release().indexOf(\"Microsoft\") >= 0;\n}\n\nexport function toPosixPath(p, partialPath) {\n  // Sometimes, you can have a path like \\Users\\IEUser on windows, and this\n  // actually means you want C:\\Users\\IEUser\n  if (p[0] === \"\\\\\" && (! partialPath)) {\n    p = process.env.SystemDrive + p;\n  }\n\n  p = p.replace(/\\\\/g, '/');\n  if (p[1] === ':' && ! partialPath) {\n    // transform \"C:/bla/bla\" to \"/c/bla/bla\"\n    p = '/' + p[0] + p.slice(2);\n  }\n\n  return p;\n}\n\nexport const convertToPosixPath = toPosixPath;\n\nexport function toDosPath(p, partialPath) {\n  if (p[0] === '/' && ! partialPath) {\n    if (! /^\\/[A-Za-z](\\/|$)/.test(p))\n      throw new Error(\"Surprising path: \" + p);\n    // transform a previously windows path back\n    // \"/C/something\" to \"c:/something\"\n    p = p[1] + \":\" + p.slice(2);\n  }\n\n  p = p.replace(/\\//g, '\\\\');\n  return p;\n}\n\nexport const convertToWindowsPath = toDosPath;\n\nexport function convertToOSPath(standardPath, partialPath) {\n  if (process.platform === \"win32\") {\n    return toDosPath(standardPath, partialPath);\n  }\n\n  return standardPath;\n}\n\nexport function convertToStandardPath(osPath, partialPath) {\n  if (process.platform === \"win32\") {\n    return toPosixPath(osPath, partialPath);\n  }\n\n  return osPath;\n}\n\nexport function convertToOSLineEndings(fileContents) {\n  return fileContents.replace(/\\n/g, EOL);\n}\n\nexport function convertToStandardLineEndings(fileContents) {\n  // Convert all kinds of end-of-line chars to linuxy \"\\n\".\n  return fileContents.replace(new RegExp(\"\\r\\n\", \"g\"), \"\\n\")\n                     .replace(new RegExp(\"\\r\", \"g\"), \"\\n\");\n}\n\n\n// Return the Unicode Normalization Form of the passed in path string, using\n// \"Normalization Form Canonical Composition\"\nexport function unicodeNormalizePath(path) {\n  return (path) ? path.normalize('NFC') : path;\n}\n\n// wrappings for path functions that always run as they were on unix (using\n// forward slashes)\nexport function wrapPathFunction(name, partialPaths) {\n  const f = path[name];\n  assert.strictEqual(typeof f, \"function\");\n\n  return function () {\n    if (process.platform === 'win32') {\n      const args = Array.prototype.map.call(\n        arguments,\n        // if partialPaths is turned on (for path.join mostly)\n        // forget about conversion of absolute paths for Windows\n        p => toDosPath(p, partialPaths),\n      );\n      const result = f.apply(path, args);\n      if (typeof result === \"string\") {\n        return toPosixPath(result, partialPaths);\n      }\n      return result;\n    }\n\n    return f.apply(path, arguments);\n  };\n}\n\nexport const pathJoin = wrapPathFunction(\"join\", true);\nexport const pathNormalize = wrapPathFunction(\"normalize\");\nexport const pathRelative = wrapPathFunction(\"relative\");\nexport const pathResolve = wrapPathFunction(\"resolve\");\nexport const pathDirname = wrapPathFunction(\"dirname\");\nexport const pathBasename = wrapPathFunction(\"basename\");\nexport const pathExtname = wrapPathFunction(\"extname\");\nexport const pathIsAbsolute = wrapPathFunction(\"isAbsolute\");\nexport const pathSep = '/';\nexport const pathDelimiter = ':';\nexport const pathOsDelimiter = path.delimiter;\n"],"file":"tools/static-assets/server/mini-files.js.map"}